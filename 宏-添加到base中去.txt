//使用/**/注释选中的代码，只支持单行 Ctrl+Alt+C
macro ChoseStr()
{
    hbuf = GetCurrentBuf()
    ln = GetBufLnCur(hbuf)
    str = GetBufSelText(hbuf)
    len = strlen(str)
 
    if(strmid(str,0,2) != "/*")//添加注释
    {
    	str = cat("/*",str)
	    str = cat(str,"*/")
    }
    else if((strmid(str,0,2) == "/*")&&
    		(strmid(str,len-2,len) == "*/")	)//删除注释
    {
    	str = strmid(str,2,len-2)   	
    }
    
    SetBufSelText (hbuf, str)
}

//使用/**/注释单行 Ctrl+Alt+S
macro SingleLine()
{
    hbuf = GetCurrentBuf()
    ln = GetBufLnCur(hbuf)
	str = GetBufLine (hbuf, ln)
	len = strlen(str)
 
    if(strmid(str,0,2) != "/*")//添加注释
    {
    	str = cat("/*",str)
	    str = cat(str,"*/")
    }
    else if((strmid(str,0,2) == "/*")&&
    		(strmid(str,len-2,len) == "*/")	)//删除注释
    {
    	str = strmid(str,2,len-2)   	
    }
    
    PutBufLine (hbuf, ln, str)
}

//使用//注释多行 Ctrl+Alt+M
macro MultiLineComment()
{
    hwnd = GetCurrentWnd()
    selection = GetWndSel(hwnd)
    LnFirst =GetWndSelLnFirst(hwnd)      //取首行行号
    LnLast =GetWndSelLnLast(hwnd)      //取末行行号
    hbuf = GetCurrentBuf()
    if(GetBufLine(hbuf, 0) =="//magic-number:tph85666031")
	{
        stop
    }
    Ln = Lnfirst
    buf = GetBufLine(hbuf, Ln)
    len = strlen(buf)
    while(Ln <= Lnlast) 
	{
        buf = GetBufLine(hbuf, Ln)  //取Ln对应的行
        if(buf ==""){                   //跳过空行
            Ln = Ln + 1
            continue
    }

	if(StrMid(buf, 0, 1) == "/"){       //需要取消注释,防止只有单字符的行
		if(StrMid(buf, 1, 2) == "/"){
			PutBufLine(hbuf, Ln, StrMid(buf, 2, Strlen(buf)))
		}

	}

	if(StrMid(buf,0,1) !="/"){          //需要添加注释
		PutBufLine(hbuf, Ln, Cat("//", buf))
	}
	Ln = Ln + 1
    }
    SetWndSel(hwnd, selection)
}

//使用#if 0注释选中的多行代码 Ctrl+Alt+0
macro If0endif_MacroComment()
{
    hwnd=GetCurrentWnd()
    sel=GetWndSel(hwnd)
    lnFirst=GetWndSelLnFirst(hwnd)
    lnLast=GetWndSelLnLast(hwnd)
    hbuf=GetCurrentBuf()
    if (LnFirst == 0) 
	{
		szIfStart = ""
    } 
	else 
	{
		szIfStart = GetBufLine(hbuf, LnFirst-1)
    }

    szIfEnd = GetBufLine(hbuf, lnLast+1)

    if (szIfStart == "#if 0" && szIfEnd =="#endif") 
	{
		DelBufLine(hbuf, lnLast+1)
		DelBufLine(hbuf, lnFirst-1)
		sel.lnFirst = sel.lnFirst - 1
		sel.lnLast = sel.lnLast - 1
    } 
	else 
	{
		InsBufLine(hbuf, lnFirst, "#if 0")
		InsBufLine(hbuf, lnLast+2, "#endif")
		sel.lnFirst = sel.lnFirst + 1
		sel.lnLast = sel.lnLast + 1
    }
    SetWndSel( hwnd, sel )
}

//单行注释文本，添加修改原因及日期时间
macro SingleLineComment()
{
	szMyName = "ycx"
	mdName = "modify"
	// Get a handle to the current file buffer and the name
	// and location of the current symbol where the cursor is.
	hbuf = GetCurrentBuf()
	ln = GetBufLnCur(hbuf)
	 
	// Get current time
	szTime = GetSysTime(1)
	Hour = szTime.Hour
	Minute = szTime.Minute
	Second = szTime.Second
	Day = szTime.Day
	Month = szTime.Month
	Year = szTime.Year
	if (Day < 10)
		szDay = "0@Day@"
	else
		szDay = Day
		
	if (Month < 10)
	     szMonth = "0@Month@"
	else
		szMonth = Month
		
	if (Hour < 10 )
		szHour = "0@Hour@"
	else
		szHour = Hour

	if (Minute < 10 )
		szMinute = "0@Minute@"
	else
		szMinute = Minute
		
	if (Second < 10 )
		szSecond = "0@Second@"
	else
		szSecond = Second
		
	szDescription = Ask("请输入修改原因")
	// begin assembling the title string
	InsBufLine(hbuf, ln+1, "/* @szDescription@ @szMyName@.@mdName@ @Year@-@szMonth@-@szDay@ @szHour@:@szMinute@:@szSecond@ */")
}
 
//新建一个文件(.c,.cpp,.h)时，文件头的注释信息 
macro MyInsertFileHeader()
{
    LnFirst = 0
    hbuf = GetCurrentBuf()
    fPath = GetBufName(hbuf)//返回当前文件的绝对路径
    LocalTime = GetSysTime(1)
    szMyName = getenv(MYNAME)
    Year = LocalTime.Year
    Month = LocalTime.Month
    Day = LocalTime.Day
    Time = LocalTime.time

    if (fPath != hNil)
    {
        fLen = strlen(fPath)

        len = fLen
		while (len > 0)//查找文件名后缀
		{
			if (fPath[len] == ".")
				break
			len = len - 1
		}
		typeName = strmid(fPath, len+1, strlen(fPath))
		suffixLen = strlen(fPath) - len;
		
		len = fLen
		while (len > 0)//查找文件名前缀
		{
			if (fPath[len] == "\\")
				break
			len = len - 1
		}
		fileName = strmid(fPath, len+1, strlen(fPath)-suffixLen)

		 		
        if((typeName=="c")||(typeName=="cpp"))
        {
            InsBufLine(hbuf, LnFirst++, "/**")
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "* \@file\t\t@fileName@.@typeName@") 
            InsBufLine(hbuf, LnFirst++, "* \@author\tBright.Yang @szMyName@")
            InsBufLine(hbuf, LnFirst++, "* \@version\tV1.0")
            InsBufLine(hbuf, LnFirst++, "* \@date\t\t@Year@/@Month@/@Day@ @Time@")
            InsBufLine(hbuf, LnFirst++, "* \@brief\tThis file provides all the @fileName@ functions. ")
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "* \@attention")
            InsBufLine(hbuf, LnFirst++, "* Copyright (C), 2018-2028, Bright.Yang")
            InsBufLine(hbuf, LnFirst++, "* All rights reserved.")
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "* \@modified by:\t")
			InsBufLine(hbuf, LnFirst++, "* \@modify info:\t")
            InsBufLine(hbuf, LnFirst++, "* \@date:\t\t")
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "**/ ")
            InsBufLine(hbuf, LnFirst++, "")
            InsBufLine(hbuf, LnFirst++, "/* Includes ----------------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "#include \"@fileName@.h\"")
            InsBufLine(hbuf, LnFirst++, "")
            InsBufLine(hbuf, LnFirst++, "/* Private typedef ---------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "/* Private macro -----------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "/* Private variables -------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "/* Private function prototypes ---------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "/* Private functions -------------------------------------------------------*/"
            InsBufLine(hbuf, LnFirst++, "")
        }
        else if(StrMid(fPath, fLen - 1, fLen)=="h")
        {
            upperName = toupper(fileName)
            InsBufLine(hbuf, LnFirst++, "/**")
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "* \@file\t\t@fileName@.h ")
            InsBufLine(hbuf, LnFirst++, "* \@author\tBright.Yang")
            InsBufLine(hbuf, LnFirst++, "* \@version\tV1.0")
            InsBufLine(hbuf, LnFirst++, "* \@date\t\t@Year@/@Month@/@Day@ @Time@")
            InsBufLine(hbuf, LnFirst++, "* \@brief\tThis file contains all the functions prototypes for the @fileName@ ")
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "* \@attention")
            InsBufLine(hbuf, LnFirst++, "* Copyright (C), 2018-2028, Bright.Yang")
            InsBufLine(hbuf, LnFirst++, "* All rights reserved.")            
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "* \@modified by:\t")
			InsBufLine(hbuf, LnFirst++, "* \@modify info:\t")
            InsBufLine(hbuf, LnFirst++, "* \@date:\t\t")
            InsBufLine(hbuf, LnFirst++, "******************************************************************************")
            InsBufLine(hbuf, LnFirst++, "**/ ")
            InsBufLine(hbuf, LnFirst++, "")
            InsBufLine(hbuf, LnFirst++, "/* Define to prevent recursive inclusion -----------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "#ifndef __@upperName@_H")
            InsBufLine(hbuf, LnFirst++, "#define __@upperName@_H")
            InsBufLine(hbuf, LnFirst++, "")
            InsBufLine(hbuf, LnFirst++, "#ifdef __cplusplus")
            InsBufLine(hbuf, LnFirst++, "extern \"C\" {")
            InsBufLine(hbuf, LnFirst++, "#endif")
            InsBufLine(hbuf, LnFirst++, "/* Includes ----------------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "#include \"includes.h\"")
            InsBufLine(hbuf, LnFirst++, "")
            InsBufLine(hbuf, LnFirst++, "/* Exported typedef --------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "/* Exported variables ------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "/* Exported macro ----------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "/* Exported functions ------------------------------------------------------*/")
            InsBufLine(hbuf, LnFirst++, "")
            InsBufLine(hbuf, LnFirst++, "#ifdef __cplusplus")
            InsBufLine(hbuf, LnFirst++, "}")
            InsBufLine(hbuf, LnFirst++, "#endif")
            InsBufLine(hbuf, LnFirst++, "#endif  /* __@upperName@_H */")
            InsBufLine(hbuf, LnFirst++, "")
        }
    }
}